version: '3'

vars:
  BINARY_DIR: bin
  BINARY_NAME: birdnet-go
  TFLITE_VERSION: v2.17.1
  TAILWIND_INPUT: tailwind.input.css
  TAILWIND_OUTPUT: assets/tailwind.css
  LABELS_DIR: internal/birdnet/data/labels
  BUILD_DATE:
    sh: date -u +%Y-%m-%dT%H:%M:%SZ
  VERSION:
    sh: |
      if [ ! -z "$BUILD_VERSION" ]; then
        echo "$BUILD_VERSION"
      else
        git describe --tags --always 2>/dev/null || echo "unknown"
      fi
  UNAME_S:
    sh: uname -s
  UNAME_M:
    sh: uname -m
  # Common build flags
  CGO_FLAGS: CGO_ENABLED=1 CGO_CFLAGS="-I$HOME/src/tensorflow"
  BUILD_FLAGS: -ldflags "-s -w -X 'main.buildDate={{.BUILD_DATE}}' -X 'main.version={{.VERSION}}'"
  # System paths
  SYSTEM_LIB_DIR_AMD64: /usr/lib
  SYSTEM_LIB_DIR_ARM64: /usr/aarch64-linux-gnu/lib

tasks:
  default:
    deps: [native-target]

  # Task for running tests
  test:
    desc: Run tests for the application
    cmds:
      - go test ./... {{.TEST_FLAGS}}
    vars:
      TEST_FLAGS: '{{default "" .CLI_ARGS}}'

  # Task for running tests with verbose output
  test-verbose:
    desc: Run tests with verbose output
    cmds:
      - task: test
        vars: {CLI_ARGS: "-v"}

  # Task for running tests with coverage report
  test-coverage:
    desc: Run tests with coverage report
    cmds:
      - mkdir -p coverage
      - go test ./... -coverprofile=coverage/coverage.out {{.TEST_FLAGS}}
      - go tool cover -html=coverage/coverage.out -o coverage/coverage.html
    vars:
      TEST_FLAGS: '{{default "" .CLI_ARGS}}'

  native-target:
    cmds:
      - task: "{{OS}}_{{ARCH}}"
    vars:
      OS:
        sh: |
          case "{{.UNAME_S}}" in
            Linux) echo "linux";;
            Darwin) echo "darwin";;
            *) echo "unsupported";;
          esac
      ARCH:
        sh: |
          case "{{.UNAME_M}}" in
            x86_64) echo "amd64";;
            aarch64) echo "arm64";;
            *) echo "unsupported";;
          esac

  check-tools:
    cmds:
      - |
        for cmd in go unzip git wget; do
          if ! command -v $cmd >/dev/null; then
            echo "$cmd not found. Please install it."
            exit 1
          fi
        done

  check-tensorflow:
    cmds:
      - |
        if [ ! -f "$HOME/src/tensorflow/tensorflow/lite/c/c_api.h" ]; then
          echo "TensorFlow Lite C API header not found. Cloning TensorFlow source..."
          mkdir -vp $HOME/src
          echo "Cloning TensorFlow source..."
          git clone --branch {{.TFLITE_VERSION}} --filter=blob:none --depth 1 https://github.com/tensorflow/tensorflow.git $HOME/src/tensorflow
          echo "Setting up sparse checkout..."
          git -C $HOME/src/tensorflow config core.sparseCheckout true
          echo "**/*.h" >> $HOME/src/tensorflow/.git/info/sparse-checkout
          echo "Checking out TensorFlow source..."
          git -C $HOME/src/tensorflow checkout
        else
          echo "TensorFlow headers already exist at version {{.TFLITE_VERSION}}"
        fi

  download-assets:
    cmds:
      - mkdir -p assets
      - curl -sL https://unpkg.com/leaflet/dist/leaflet.js -o assets/leaflet.js
      - curl -sL https://unpkg.com/leaflet/dist/leaflet.css -o assets/leaflet.css
      - curl -sL https://unpkg.com/htmx.org@2.0 -o assets/htmx.min.js
      - curl -sL https://unpkg.com/alpinejs -o assets/alpinejs.min.js
      - curl -sL https://cdn.jsdelivr.net/npm/hls.js@latest -o assets/hls.min.js
      - curl -sL https://cdn.jsdelivr.net/npm/howler@latest/dist/howler.min.js -o assets/howler.min.js

  generate-tailwindcss:
    cmds:
      - npm -D install daisyui@4.12.24
      - npx --yes tailwindcss@3.4.17 -i {{.TAILWIND_INPUT}} -o {{.TAILWIND_OUTPUT}} --minify

  dev_server:
    cmds:
      - air realtime

  clean:
    cmds:
      - go clean
      - rm -rf {{.BINARY_DIR}}/* tflite_c *.tar.gz *.zip

  linux_amd64:
    deps: [check-tools, check-tensorflow]
    vars:
      TFLITE_LIB_DIR: '{{.DOCKER_LIB_DIR | default .SYSTEM_LIB_DIR_AMD64}}'
      TFLITE_LIB_ARCH: linux_amd64.tar.gz
      TARGET: linux_amd64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        mkdir -p {{.TFLITE_LIB_DIR}}
        GOOS=linux GOARCH=amd64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  linux_arm64:
    deps: [check-tools, check-tensorflow]
    vars:
      TFLITE_LIB_DIR: '{{.DOCKER_LIB_DIR | default .SYSTEM_LIB_DIR_ARM64}}'
      TFLITE_LIB_ARCH: linux_arm64.tar.gz
      TARGET: linux_arm64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        mkdir -p {{.TFLITE_LIB_DIR}}
        if [ "$(uname -m)" != "aarch64" ]; then
          export CC=aarch64-linux-gnu-gcc
        fi
        GOOS=linux GOARCH=arm64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  windows_amd64:
    deps: [check-tools, check-tensorflow]
    vars:
      TFLITE_LIB_DIR: /usr/x86_64-w64-mingw32/lib
      TFLITE_LIB_ARCH: windows_amd64.zip
      TARGET: windows_amd64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        GOOS=windows GOARCH=amd64 {{.CGO_FLAGS}} \
        CC=x86_64-w64-mingw32-gcc \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}.exe

  darwin_amd64:
    deps: [check-tools, check-tensorflow]
    vars:
      TFLITE_LIB_DIR: /opt/homebrew/lib
      TFLITE_LIB_ARCH: darwin_amd64.tar.gz
      TARGET: darwin_amd64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        GOOS=darwin GOARCH=amd64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  darwin_arm64:
    deps: [check-tools, check-tensorflow]
    vars:
      TFLITE_LIB_DIR: /opt/homebrew/lib
      TFLITE_LIB_ARCH: darwin_arm64.tar.gz
      TARGET: darwin_arm64
    cmds:
      - task: download-tflite
        vars: {TFLITE_LIB_DIR: '{{.TFLITE_LIB_DIR}}', TFLITE_LIB_ARCH: '{{.TFLITE_LIB_ARCH}}', TARGET: '{{.TARGET}}'}
      - |
        GOOS=darwin GOARCH=arm64 {{.CGO_FLAGS}} \
        CGO_LDFLAGS="-L{{.TFLITE_LIB_DIR}} -ltensorflowlite_c" \
        go build {{.BUILD_FLAGS}} -o {{.BINARY_DIR}}/{{.BINARY_NAME}}

  download-tflite:
    internal: true
    vars:
      LIB_FILENAME:
        sh: |
          case "{{.TARGET}}" in
            windows_amd64) echo "tensorflowlite_c-${TFLITE_VERSION#v}.dll";;
            linux*) echo "libtensorflowlite_c.so.${TFLITE_VERSION#v}";;
            darwin*) echo "libtensorflowlite_c.${TFLITE_VERSION#v}.dylib";;
          esac
    cmds:
      - |
        if [ ! -f "{{.TFLITE_LIB_DIR}}/{{.LIB_FILENAME}}" ]; then
          echo "TensorFlow Lite C library not found. Downloading..."
          wget -q "https://github.com/tphakala/tflite_c/releases/download/{{.TFLITE_VERSION}}/tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}" -P ./
          
          mkdir -p "{{.TFLITE_LIB_DIR}}"
          if [[ "{{.TFLITE_LIB_ARCH}}" == *.zip ]]; then
            unzip -o "tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}"
            mv "{{.LIB_FILENAME}}" "{{.TFLITE_LIB_DIR}}/"
          else
            tar -xzf "tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}"
            mv "{{.LIB_FILENAME}}" "{{.TFLITE_LIB_DIR}}/"
          fi
          
          rm -f "tflite_c_{{.TFLITE_VERSION}}_{{.TFLITE_LIB_ARCH}}"
        fi
      - task: ensure-tflite-symlinks
        vars: {LIB_DIR: '{{.TFLITE_LIB_DIR}}', LIB_FILENAME: '{{.LIB_FILENAME}}'}

  ensure-tflite-symlinks:
    internal: true
    cmds:
      - mkdir -p "{{.LIB_DIR}}"
      - |
        if [[ "{{.LIB_FILENAME}}" == *.dll ]] && [ ! -f "{{.LIB_DIR}}/tensorflowlite_c.dll" ]; then
          ln -sf "{{.LIB_DIR}}/{{.LIB_FILENAME}}" "{{.LIB_DIR}}/tensorflowlite_c.dll"
        elif [ "{{.UNAME_S}}" = "Linux" ] && [ ! -f "{{.LIB_DIR}}/libtensorflowlite_c.so" ]; then
          cd {{.LIB_DIR}} && \
          ln -sf {{.LIB_FILENAME}} libtensorflowlite_c.so.2 && \
          ln -sf libtensorflowlite_c.so.2 libtensorflowlite_c.so
        elif [ "{{.UNAME_S}}" = "Darwin" ] && [ ! -f "{{.LIB_DIR}}/libtensorflowlite_c.dylib" ]; then
          cd {{.LIB_DIR}} && \
          ln -sf {{.LIB_FILENAME}} libtensorflowlite_c.dylib
        fi 
      